
/**********************************************************************************************
    This file is part of PriiDash(TM), an enhanced instrument panel and
    data logger for the Prius and more. 
    Copyright (C) 2011 by TeamPrii at sourceforge.net

    PriiDash(TM) is provided "AS IS" under the terms of 
    the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version, WITH ADDITIONAL TERMS in 
    paragraphs below.

    This program is distributed in the hope that it will be useful,
    but Without Any Warranty; without even the implied warranty of
    Merchantability or Fitness For A Particular Purpose.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

    ADDITIONAL TERMS
    
    IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY
    DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
    (INCLUDING, BUT NOT LIMITED TO, DEATH; INJURY; COLLISION AND/OR DAMAGE TO VEHICLES;
    LIABILITY FOR ACCIDENTS AND/OR TRAFFIC VIOLATIONS; PROCUREMENT OF SUBSTITUTE GOODS OR
    SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
    ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
    NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE OR
    INABILITY TO USE THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

    THE AUTHOR RESERVES ALL RIGHTS OF OWNERSHIP OF THE NAME OF THE SOFTWARE, PriiDash(TM).
    ALL MODIFIED VERSIONS MUST BE CLEARLY MARKED AS BEING DIFFERENT FROM THE ORIGINAL,
    AND MUST CARRY ACKNOWLEDGEMENT TO THE ORIGINAL AUTHOR, TeamPrii at sourceforge.net. 
    ALL ADVERTISING MATERIALS MENTIONING FEATURES OR USE OF THIS SOFTWARE
    MUST DISPLAY THE FOLLOWING ACKNOWLEDGEMENT:
    This product includes the software PriiDash(TM) developed by 
    TeamPrii at sourceforge.net.
    
    To contact the author: look up TeamPrii at sourceforge.net.
    Project home page: http://priidash.sourceforge.net/
************************************************************************************************/


// generated by Fast Light User Interface Designer (fluid) version 1.0110

#include "Dash.h"
#include "OS.h"
#include <stdio.h>
#include <FL/Fl_File_Chooser.H>
#include <boost/thread/thread.hpp>
#include "UI.h"
#include "Util.h"
#include "LogToCSV.h"
bool QuitProgram; //Signal Quit button press -> runUI() to stop looping
bool QuitShowLic; //Signal Accept button press -> showLic() to stop looping
static boost::thread workerThread; //thread for runUI()

static void set_log_filename_CB() {
  Fl_File_Chooser f(log_filename->value(),"*.txt",Fl_File_Chooser::CREATE,"Set log filename");
f.preview(0);
f.show();
while(f.shown()){Fl::check();}
if (f.count()>0){log_filename->value(f.value());};
}

static void set_csv_filename_CB() {
  Fl_File_Chooser f(csv_filename->value(),"*.csv\t*.txt",Fl_File_Chooser::CREATE,"Set csv filename");
f.preview(0);
f.show();
while(f.shown()){Fl::check();}
if (f.count()>0){csv_filename->value(f.value());};
}

static void convert_log_csv_CB() {
  //boost::thread thrlogtocsv;
//	printf("logtocsv() thread starting ... ");fflush(stdout);
//	thrlogtocsv=boost::thread(logtocsv, log_filename->value(), csv_filename->value());
//	printf("logtocsv() thread started\n");fflush(stdout);
logtocsv(log_filename->value(), csv_filename->value());
}

static void go_button_CB(Fl_Widget*, void* userdata) {
  printf("%s > Go button pressed\n",(const char*)userdata);fflush(stdout);
switch (UIstate){
	case Stopped:{
		UIstate = Running;
		setUIstate(UIstate);
		break;
	}
	case Running:{
		UIstate = Stopped;
		setUIstate(UIstate);
		break;
	}	
}
}

static void main_window_CB() {
  printf("main_window quit button pressed\n");fflush(stdout);
QuitProgram=true;
printf("waiting for runUI() thread to end\n");fflush(stdout);
workerThread.join();
printf("thread ended. Exitting...\n");fflush(stdout);
//Fl::flush();    
//Fl::unlock();
exit(0);
}
#include "icon.h"

Fl_Double_Window *main_window=(Fl_Double_Window *)0;

Fl_Group *run_group=(Fl_Group *)0;

Fl_Button *go_button=(Fl_Button *)0;

Fl_Choice *run_type_choice=(Fl_Choice *)0;

static void cb_run_type_normal(Fl_Menu_*, void*) {
  UIruntype=Normal;
}

static void cb_run_type_simulation(Fl_Menu_*, void*) {
  UIruntype=Simulation;
}

Fl_Menu_Item menu_run_type_choice[] = {
 {"Normal", 0,  (Fl_Callback*)cb_run_type_normal, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Simulation", 0,  (Fl_Callback*)cb_run_type_simulation, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Group *settings_group=(Fl_Group *)0;

Fl_Output *OBDUSB_portname=(Fl_Output *)0;

Fl_Button *set_OBDUSB_portname=(Fl_Button *)0;

static void cb_set_OBDUSB_portname(Fl_Button*, void*) {
  Fl_File_Chooser f("/dev/","ttyU*",Fl_File_Chooser::SINGLE,"Set OBDUSB port");
f.preview(0);
f.show();
while(f.shown()){Fl::check();}
if (f.count()>0){OBDUSB_portname->value(f.value());};
}

Fl_Output *log_filename=(Fl_Output *)0;

Fl_Button *set_log_filename=(Fl_Button *)0;

Fl_Output *csv_filename=(Fl_Output *)0;

Fl_Button *set_csv_filename=(Fl_Button *)0;

Fl_Button *convert_log_csv=(Fl_Button *)0;

Fl_Button *about_button=(Fl_Button *)0;

static void cb_about_button(Fl_Button*, void*) {
  //QuitShowLic=false;
//boost::thread thr1;
//thr1=boost::thread(showLic);

if (!about_window) {make_about_window();}
//about_window->fullscreen();
about_window->show();
Fl::flush();
}

int main(int argc, char **argv) {
  printf("**********************************************************************\n"
"    PriiDash(TM)  Copyright (C) 2011 by TeamPrii at sourceforge.net\n"
"    This program is licensed under the GNU General Public License,\n"
"    with ADDITIONAL TERMS. For details click\n" 
"    \"About PriiDash(TM) ...\" button in \"Main Control\" window.\n"
"**********************************************************************\n");
fflush(stdout);
  { main_window = new Fl_Double_Window(723, 223, "Main Control - PriiDash(TM)");
    main_window->color((Fl_Color)38);
    main_window->callback((Fl_Callback*)main_window_CB);
    { run_group = new Fl_Group(605, 39, 114, 156);
      run_group->box(FL_ROUNDED_BOX);
      run_group->color((Fl_Color)FL_GRAY0);
      { go_button = new Fl_Button(616, 43, 93, 94, "Go");
        go_button->type(1);
        go_button->box(FL_ROUND_UP_BOX);
        go_button->down_box(FL_ROUND_UP_BOX);
        go_button->color((Fl_Color)61);
        go_button->selection_color((Fl_Color)73);
        go_button->labelfont(1);
        go_button->labelsize(24);
        go_button->callback((Fl_Callback*)go_button_CB, (void*)("Main Control"));
      } // Fl_Button* go_button
      { run_type_choice = new Fl_Choice(611, 164, 101, 19, "run type");
        run_type_choice->box(FL_UP_BOX);
        run_type_choice->down_box(FL_BORDER_BOX);
        run_type_choice->color((Fl_Color)37);
        run_type_choice->labelfont(1);
        run_type_choice->labelcolor((Fl_Color)26);
        run_type_choice->align(FL_ALIGN_TOP);
        run_type_choice->menu(menu_run_type_choice);
      } // Fl_Choice* run_type_choice
      run_group->end();
    } // Fl_Group* run_group
    { settings_group = new Fl_Group(5, 51, 593, 134);
      settings_group->box(FL_ROUNDED_BOX);
      settings_group->color((Fl_Color)FL_GRAY0);
      { Fl_Output* o = OBDUSB_portname = new Fl_Output(162, 61, 160, 25);
        OBDUSB_portname->color((Fl_Color)84);
        OBDUSB_portname->labelcolor((Fl_Color)94);
        o->value("/dev/ttyS6");//"/dev/ttyUSB0");
      } // Fl_Output* OBDUSB_portname
      { set_OBDUSB_portname = new Fl_Button(10, 55, 150, 37, "Set OBDUSB port");
        set_OBDUSB_portname->box(FL_ROUND_UP_BOX);
        set_OBDUSB_portname->color((Fl_Color)FL_DARK_RED);
        set_OBDUSB_portname->labelfont(1);
        set_OBDUSB_portname->labelcolor((Fl_Color)3);
        set_OBDUSB_portname->callback((Fl_Callback*)cb_set_OBDUSB_portname);
        set_OBDUSB_portname->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      } // Fl_Button* set_OBDUSB_portname
      { log_filename = new Fl_Output(164, 103, 420, 25);
        log_filename->color((Fl_Color)FL_DARK_CYAN);
      } // Fl_Output* log_filename
      { set_log_filename = new Fl_Button(10, 98, 150, 37, "Set log filename");
        set_log_filename->box(FL_ROUND_UP_BOX);
        set_log_filename->color((Fl_Color)FL_SELECTION_COLOR);
        set_log_filename->labelfont(1);
        set_log_filename->labelcolor((Fl_Color)6);
        set_log_filename->callback((Fl_Callback*)set_log_filename_CB);
        set_log_filename->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      } // Fl_Button* set_log_filename
      { Fl_Output* o = csv_filename = new Fl_Output(164, 144, 420, 25);
        csv_filename->color((Fl_Color)101);
        //o->value("/media/Home/OBDlog/test.csv");
      } // Fl_Output* csv_filename
      { set_csv_filename = new Fl_Button(10, 138, 150, 37, "Set csv filename");
        set_csv_filename->box(FL_ROUND_UP_BOX);
        set_csv_filename->color((Fl_Color)57);
        set_csv_filename->labelfont(1);
        set_csv_filename->labelcolor((Fl_Color)119);
        set_csv_filename->callback((Fl_Callback*)set_csv_filename_CB);
        set_csv_filename->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      } // Fl_Button* set_csv_filename
      { convert_log_csv = new Fl_Button(429, 61, 150, 37, "Convert log->csv");
        convert_log_csv->box(FL_ROUND_UP_BOX);
        convert_log_csv->color((Fl_Color)57);
        convert_log_csv->labelfont(1);
        convert_log_csv->labelcolor((Fl_Color)119);
        convert_log_csv->callback((Fl_Callback*)convert_log_csv_CB);
        convert_log_csv->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      } // Fl_Button* convert_log_csv
      settings_group->end();
    } // Fl_Group* settings_group
    { about_button = new Fl_Button(25, 8, 235, 39, "About PriiDash(TM) ...");
      about_button->labelfont(1);
      about_button->labelsize(18);
      about_button->callback((Fl_Callback*)cb_about_button);
    } // Fl_Button* about_button
    main_window->end();
  } // Fl_Double_Window* main_window
  init_filenames();
UIstate = Stopped;

Fl::lock();

seticonfixed(main_window);

QuitProgram=false;
printf("runUI() thread starting ... ");fflush(stdout);
//boost::thread workerThread(runUI);
workerThread = boost::thread(runUI);
printf("runUI() thread started\n");fflush(stdout);

//if (!about_window) {make_about_window();}
//about_window->fullscreen();
//about_window->show();
//while (!QuitShowLic){wait(0.5);}

FILE *fp;
fp = fopen("LicRead.txt","r"); //
if (fp==NULL) {
	QuitShowLic=false;
	boost::thread thr1;
	printf("showLic() thread starting ... ");fflush(stdout);
	thr1=boost::thread(showLic);
	printf("showLic() thread started\n");fflush(stdout);
}
fclose(fp);
  main_window->show(argc, argv);
  return Fl::run();
}

Gauges::Gauges() {
  { Fl_Double_Window* o = gauges_window = new Fl_Double_Window(895, 576, "Gauges - PriiDash(TM)");
    gauges_window->color((Fl_Color)FL_GRAY0);
    gauges_window->user_data((void*)(this));
    { Fl_Gauge* o = iceT_G = new Fl_Gauge(2, 2, 208, 208, "ICE T(F)");
      iceT_G->box(FL_ROUNDED_BOX);
      iceT_G->color((Fl_Color)34);
      iceT_G->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      iceT_G->labeltype(FL_NORMAL_LABEL);
      iceT_G->labelfont(1);
      iceT_G->labelsize(18);
      iceT_G->labelcolor((Fl_Color)252);
      iceT_G->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
      iceT_G->when(FL_WHEN_RELEASE);
      o->type(FL_GAUGE_ROUND);o->valuedisplaydelta(0.1);
      o->greenzonecolorG(FL_GREEN);o->greenzonecolorR(FL_RED);o->dialcolorR(FL_RED);o->redlinecolorR(FL_YELLOW);
      o->max(205);o->min(100);o->step(10);o->stepdiv(5);o->redlinestart(195);o->greenzoneend(157);o->greenzonestart(104);
      o->pointercolor(o->labelcolor());o->pointercolor0(o->labelcolor());o->pointercolorG(o->labelcolor());o->pointercolorR(FL_BLUE);
    } // Fl_Gauge* iceT_G
    { wT_G = new Fl_Gauge(1, 263, 210, 52, "wT(F)");
      wT_G->box(FL_ROUNDED_BOX);
      wT_G->color((Fl_Color)34);
      wT_G->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      wT_G->labeltype(FL_NORMAL_LABEL);
      wT_G->labelfont(1);
      wT_G->labelsize(14);
      wT_G->labelcolor((Fl_Color)133);
      wT_G->align(FL_ALIGN_BOTTOM_LEFT|FL_ALIGN_INSIDE);
      wT_G->when(FL_WHEN_RELEASE);
    } // Fl_Gauge* wT_G
    { Fl_Gauge* o = speed_G = new Fl_Gauge(305, 2, 170, 121, "MPH");
      speed_G->box(FL_ROUNDED_BOX);
      speed_G->color((Fl_Color)34);
      speed_G->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      speed_G->labeltype(FL_NORMAL_LABEL);
      speed_G->labelfont(2);
      speed_G->labelsize(16);
      speed_G->labelcolor((Fl_Color)199);
      speed_G->align(FL_ALIGN_BOTTOM_RIGHT|FL_ALIGN_INSIDE);
      speed_G->when(FL_WHEN_RELEASE);
      o->type(FL_GAUGE_SPEED);o->valuedisplaydelta(0.1);
      o->valuefontsize(120);
      o->redlinestart(41);o->greenzoneend(40.99);o->greenzonestart(34);
    } // Fl_Gauge* speed_G
    { Fl_Gauge* o = amp_G = new Fl_Gauge(210, 123, 265, 110, "A");
      amp_G->box(FL_ROUNDED_BOX);
      amp_G->color((Fl_Color)34);
      amp_G->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      amp_G->labeltype(FL_NORMAL_LABEL);
      amp_G->labelfont(1);
      amp_G->labelsize(20);
      amp_G->labelcolor((Fl_Color)218);
      amp_G->align(FL_ALIGN_BOTTOM|FL_ALIGN_INSIDE);
      amp_G->when(FL_WHEN_RELEASE);
      o->valuedisplaydelta(0.15);
    } // Fl_Gauge* amp_G
    { Fl_Gauge* o = soc_G = new Fl_Gauge(211, 233, 145, 76, "SOC(%)");
      soc_G->box(FL_ROUNDED_BOX);
      soc_G->color((Fl_Color)34);
      soc_G->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      soc_G->labeltype(FL_NORMAL_LABEL);
      soc_G->labelfont(1);
      soc_G->labelsize(14);
      soc_G->labelcolor((Fl_Color)218);
      soc_G->align(FL_ALIGN_BOTTOM_LEFT|FL_ALIGN_INSIDE);
      soc_G->when(FL_WHEN_RELEASE);
      o->valuedisplaydelta(0.2);
    } // Fl_Gauge* soc_G
    { Fl_Gauge* o = rpm_G = new Fl_Gauge(475, -1, 208, 208, "RPM");
      rpm_G->box(FL_ROUNDED_BOX);
      rpm_G->color((Fl_Color)34);
      rpm_G->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      rpm_G->labeltype(FL_NORMAL_LABEL);
      rpm_G->labelfont(1);
      rpm_G->labelsize(18);
      rpm_G->labelcolor((Fl_Color)133);
      rpm_G->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
      rpm_G->when(FL_WHEN_RELEASE);
      o->type(FL_GAUGE_ROUND);o->framecolor(fl_lighter(o->labelcolor()));
      o->greenzonecolorG(FL_WHITE);o->dialcolorG(FL_DARK_GREEN);o->greenzonecolorR(FL_RED);o->dialcolorR(FL_DARK_CYAN);
      o->pointercolor(FL_BLACK);o->pointercolor0(FL_BLACK);o->pointercolorG(FL_BLACK);o->pointercolorR(FL_YELLOW);
      o->valuedisplaydelta(16);
    } // Fl_Gauge* rpm_G
    { Fl_Gauge* o = ign_G = new Fl_Gauge(520, 442, 160, 45, "IGN");
      ign_G->box(FL_ROUNDED_BOX);
      ign_G->color((Fl_Color)34);
      ign_G->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      ign_G->labeltype(FL_NORMAL_LABEL);
      ign_G->labelfont(1);
      ign_G->labelsize(14);
      ign_G->labelcolor((Fl_Color)133);
      ign_G->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
      ign_G->when(FL_WHEN_RELEASE);
      o->greenzonecolorG(FL_GREEN);o->pointercolor(FL_WHITE);o->pointercolor0(FL_WHITE);
      o->valuefontsize(36);
    } // Fl_Gauge* ign_G
    { Fl_Gauge* o = hvV_G = new Fl_Gauge(370, 283, 105, 38, "HV(V)");
      hvV_G->box(FL_ROUNDED_BOX);
      hvV_G->color((Fl_Color)34);
      hvV_G->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      hvV_G->labeltype(FL_NORMAL_LABEL);
      hvV_G->labelfont(1);
      hvV_G->labelsize(12);
      hvV_G->labelcolor((Fl_Color)61);
      hvV_G->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
      hvV_G->when(FL_WHEN_RELEASE);
      o->greenzonemode(FL_GAUGE_GZ_OFF);
      o->redlinemode(FL_GAUGE_RL_OFF);
      o->framecolor(fl_darker(o->labelcolor()));
      int RealPlace=3; int DecPlace=0;o->valueplaces(RealPlace,DecPlace);o->valuedisplaydelta(2);
    } // Fl_Gauge* hvV_G
    { Fl_Gauge* o = auxV_G = new Fl_Gauge(575, 487, 90, 45, "12V");
      auxV_G->box(FL_ROUNDED_BOX);
      auxV_G->color((Fl_Color)34);
      auxV_G->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      auxV_G->labeltype(FL_NORMAL_LABEL);
      auxV_G->labelfont(1);
      auxV_G->labelsize(12);
      auxV_G->labelcolor((Fl_Color)61);
      auxV_G->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
      auxV_G->when(FL_WHEN_RELEASE);
      o->greenzonemode(FL_GAUGE_GZ_OFF);o->valuefontsize(24);
      o->redlinemode(FL_GAUGE_RL_OFF);o->pointercolor(fl_lighter(o->labelcolor()));
      o->framecolor(fl_darker(o->labelcolor()));
      int RealPlace=5; int DecPlace=2; o->valueplaces(RealPlace,DecPlace);
    } // Fl_Gauge* auxV_G
    { Fl_Gauge* o = dsc_G = new Fl_Gauge(340, 529, 75, 46, "dsc(%)");
      dsc_G->box(FL_ROUNDED_BOX);
      dsc_G->color((Fl_Color)34);
      dsc_G->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      dsc_G->labeltype(FL_NORMAL_LABEL);
      dsc_G->labelfont(1);
      dsc_G->labelsize(12);
      dsc_G->labelcolor((Fl_Color)218);
      dsc_G->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
      dsc_G->when(FL_WHEN_RELEASE);
      o->greenzonemode(FL_GAUGE_GZ_OFF);
      o->redlinemode(FL_GAUGE_RL_OFF);
      o->framecolor(fl_darker(o->labelcolor()));
      int RealPlace=3; int DecPlace=1;o->valueplaces(RealPlace,DecPlace);
    } // Fl_Gauge* dsc_G
    { Fl_Gauge* o = oaT_G = new Fl_Gauge(805, -1, 90, 66, "OAT(F)");
      oaT_G->box(FL_ROUNDED_BOX);
      oaT_G->color((Fl_Color)34);
      oaT_G->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      oaT_G->labeltype(FL_NORMAL_LABEL);
      oaT_G->labelfont(1);
      oaT_G->labelsize(12);
      oaT_G->labelcolor((Fl_Color)FL_LIGHT2);
      oaT_G->align(FL_ALIGN_BOTTOM_LEFT|FL_ALIGN_INSIDE);
      oaT_G->when(FL_WHEN_RELEASE);
      o->greenzonemode(FL_GAUGE_GZ_OFF);o->valuefontsize(28);
      o->redlinemode(FL_GAUGE_RL_OFF);
      o->framecolor(fl_darker(o->labelcolor()));
      int RealPlace=4; int DecPlace=1;o->valueplaces(RealPlace,DecPlace);
    } // Fl_Gauge* oaT_G
    { Fl_Gauge* o = intakeT_G = new Fl_Gauge(800, 65, 95, 56, "intake T(F)");
      intakeT_G->box(FL_ROUNDED_BOX);
      intakeT_G->color((Fl_Color)34);
      intakeT_G->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      intakeT_G->labeltype(FL_NORMAL_LABEL);
      intakeT_G->labelfont(1);
      intakeT_G->labelsize(12);
      intakeT_G->labelcolor((Fl_Color)133);
      intakeT_G->align(FL_ALIGN_BOTTOM_LEFT|FL_ALIGN_INSIDE);
      intakeT_G->when(FL_WHEN_RELEASE);
      o->greenzonemode(FL_GAUGE_GZ_OFF);o->valuefontsize(24);
      o->redlinemode(FL_GAUGE_RL_OFF);
      o->framecolor(fl_darker(o->labelcolor()));
      int RealPlace=3; int DecPlace=1;o->valueplaces(RealPlace,DecPlace);
    } // Fl_Gauge* intakeT_G
    { Fl_Gauge* o = atm_G = new Fl_Gauge(810, 121, 85, 58, "atm(kPa)");
      atm_G->box(FL_ROUNDED_BOX);
      atm_G->color((Fl_Color)34);
      atm_G->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      atm_G->labeltype(FL_NORMAL_LABEL);
      atm_G->labelfont(1);
      atm_G->labelsize(12);
      atm_G->labelcolor((Fl_Color)FL_LIGHT2);
      atm_G->align(FL_ALIGN_BOTTOM|FL_ALIGN_INSIDE);
      atm_G->when(FL_WHEN_RELEASE);
      o->greenzonemode(FL_GAUGE_GZ_OFF);o->valuefontsize(24);
      o->redlinemode(FL_GAUGE_RL_OFF);
      o->framecolor(fl_darker(o->labelcolor()));
      int RealPlace=1; int DecPlace=0;o->valueplaces(RealPlace,DecPlace);
    } // Fl_Gauge* atm_G
    { Fl_Gauge* o = inv1T_G = new Fl_Gauge(3, 320, 48, 220, "Inv1 T(C)");
      inv1T_G->box(FL_ROUNDED_BOX);
      inv1T_G->color((Fl_Color)34);
      inv1T_G->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      inv1T_G->labeltype(FL_NORMAL_LABEL);
      inv1T_G->labelfont(1);
      inv1T_G->labelsize(14);
      inv1T_G->labelcolor((Fl_Color)181);
      inv1T_G->align(130);
      inv1T_G->when(FL_WHEN_RELEASE);
      o->type(FL_GAUGE_VERTICAL);
      o->redlinestart(55);
    } // Fl_Gauge* inv1T_G
    { Fl_Gauge* o = inv2T_G = new Fl_Gauge(51, 320, 48, 220, "Inv2 T(C)");
      inv2T_G->box(FL_ROUNDED_BOX);
      inv2T_G->color((Fl_Color)34);
      inv2T_G->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      inv2T_G->labeltype(FL_NORMAL_LABEL);
      inv2T_G->labelfont(1);
      inv2T_G->labelsize(14);
      inv2T_G->labelcolor((Fl_Color)126);
      inv2T_G->align(130);
      inv2T_G->when(FL_WHEN_RELEASE);
      o->type(FL_GAUGE_VERTICAL);
      o->redlinestart(55);
    } // Fl_Gauge* inv2T_G
    { Fl_Gauge* o = mg1T_G = new Fl_Gauge(147, 320, 48, 220, "mg1 T(C)");
      mg1T_G->box(FL_ROUNDED_BOX);
      mg1T_G->color((Fl_Color)34);
      mg1T_G->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      mg1T_G->labeltype(FL_NORMAL_LABEL);
      mg1T_G->labelfont(1);
      mg1T_G->labelsize(14);
      mg1T_G->labelcolor((Fl_Color)181);
      mg1T_G->align(130);
      mg1T_G->when(FL_WHEN_RELEASE);
      o->type(FL_GAUGE_VERTICAL);
      o->redlinestart(55);
    } // Fl_Gauge* mg1T_G
    { Fl_Gauge* o = mg2T_G = new Fl_Gauge(195, 320, 48, 220, "mg2 T(C)");
      mg2T_G->box(FL_ROUNDED_BOX);
      mg2T_G->color((Fl_Color)34);
      mg2T_G->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      mg2T_G->labeltype(FL_NORMAL_LABEL);
      mg2T_G->labelfont(1);
      mg2T_G->labelsize(14);
      mg2T_G->labelcolor((Fl_Color)126);
      mg2T_G->align(130);
      mg2T_G->when(FL_WHEN_RELEASE);
      o->type(FL_GAUGE_VERTICAL);
      o->redlinestart(55);
    } // Fl_Gauge* mg2T_G
    { Fl_Gauge* o = cnvT_G = new Fl_Gauge(99, 320, 48, 220, "Cnvt T(C)");
      cnvT_G->box(FL_ROUNDED_BOX);
      cnvT_G->color((Fl_Color)34);
      cnvT_G->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      cnvT_G->labeltype(FL_NORMAL_LABEL);
      cnvT_G->labelfont(1);
      cnvT_G->labelsize(14);
      cnvT_G->labelcolor((Fl_Color)158);
      cnvT_G->align(130);
      cnvT_G->when(FL_WHEN_RELEASE);
      o->type(FL_GAUGE_VERTICAL);
      o->redlinestart(55);
    } // Fl_Gauge* cnvT_G
    { Fl_Gauge* o = blC_G = new Fl_Gauge(243, 320, 48, 220, "blC");
      blC_G->box(FL_ROUNDED_BOX);
      blC_G->color((Fl_Color)34);
      blC_G->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      blC_G->labeltype(FL_NORMAL_LABEL);
      blC_G->labelfont(1);
      blC_G->labelsize(14);
      blC_G->labelcolor((Fl_Color)218);
      blC_G->align(130);
      blC_G->when(FL_WHEN_RELEASE);
      o->type(FL_GAUGE_VERTICAL);
      o->redlinestart(40);
    } // Fl_Gauge* blC_G
    { Fl_Gauge* o = buC_G = new Fl_Gauge(291, 320, 48, 220, "buC");
      buC_G->box(FL_ROUNDED_BOX);
      buC_G->color((Fl_Color)34);
      buC_G->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      buC_G->labeltype(FL_NORMAL_LABEL);
      buC_G->labelfont(1);
      buC_G->labelsize(14);
      buC_G->labelcolor((Fl_Color)218);
      buC_G->align(130);
      buC_G->when(FL_WHEN_RELEASE);
      o->type(FL_GAUGE_VERTICAL);
      o->redlinestart(40);
    } // Fl_Gauge* buC_G
    { Fl_Gauge* o = catT1_G = new Fl_Gauge(210, 1, 95, 64, "cat1 T(C)");
      catT1_G->box(FL_ROUNDED_BOX);
      catT1_G->color((Fl_Color)34);
      catT1_G->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      catT1_G->labeltype(FL_NORMAL_LABEL);
      catT1_G->labelfont(1);
      catT1_G->labelsize(12);
      catT1_G->labelcolor((Fl_Color)90);
      catT1_G->align(FL_ALIGN_BOTTOM_LEFT|FL_ALIGN_INSIDE);
      catT1_G->when(FL_WHEN_RELEASE);
      o->greenzonemode(FL_GAUGE_GZ_OFF);o->valuefontsize(32);
      o->redlinemode(FL_GAUGE_RL_OFF);
      o->framecolor(fl_darker(o->labelcolor()));
      int RealPlace=3; int DecPlace=0;o->valueplaces(RealPlace,DecPlace);
    } // Fl_Gauge* catT1_G
    { Fl_Gauge* o = catT2_G = new Fl_Gauge(210, 64, 95, 59, "cat2 T(C)");
      catT2_G->box(FL_ROUNDED_BOX);
      catT2_G->color((Fl_Color)34);
      catT2_G->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      catT2_G->labeltype(FL_NORMAL_LABEL);
      catT2_G->labelfont(1);
      catT2_G->labelsize(12);
      catT2_G->labelcolor((Fl_Color)90);
      catT2_G->align(FL_ALIGN_BOTTOM_LEFT|FL_ALIGN_INSIDE);
      catT2_G->when(FL_WHEN_RELEASE);
      o->greenzonemode(FL_GAUGE_GZ_OFF);o->valuefontsize(32);
      o->redlinemode(FL_GAUGE_RL_OFF);
      o->framecolor(fl_darker(o->labelcolor()));
      int RealPlace=3; int DecPlace=0;o->valueplaces(RealPlace,DecPlace);
    } // Fl_Gauge* catT2_G
    { Fl_Gauge* o = rpm2_G = new Fl_Gauge(690, 536, 110, 37, "RPM2");
      rpm2_G->box(FL_ROUNDED_BOX);
      rpm2_G->color((Fl_Color)34);
      rpm2_G->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      rpm2_G->labeltype(FL_NORMAL_LABEL);
      rpm2_G->labelfont(1);
      rpm2_G->labelsize(12);
      rpm2_G->labelcolor((Fl_Color)90);
      rpm2_G->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
      rpm2_G->when(FL_WHEN_RELEASE);
      o->greenzonemode(FL_GAUGE_GZ_OFF);
      o->redlinemode(FL_GAUGE_RL_OFF);
      o->framecolor(fl_darker(o->labelcolor()));o->valuefontsize(24);
      int RealPlace=4; int DecPlace=0; o->valueplaces(RealPlace,DecPlace);o->valuedisplaydelta(16);
    } // Fl_Gauge* rpm2_G
    { Fl_Gauge* o = mg1rpm_G = new Fl_Gauge(690, 461, 110, 37, "MG1 RPM");
      mg1rpm_G->box(FL_ROUNDED_BOX);
      mg1rpm_G->color((Fl_Color)34);
      mg1rpm_G->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      mg1rpm_G->labeltype(FL_NORMAL_LABEL);
      mg1rpm_G->labelfont(1);
      mg1rpm_G->labelsize(12);
      mg1rpm_G->labelcolor((Fl_Color)181);
      mg1rpm_G->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
      mg1rpm_G->when(FL_WHEN_RELEASE);
      o->greenzonemode(FL_GAUGE_GZ_OFF);
      o->redlinemode(FL_GAUGE_RL_OFF);
      o->framecolor(fl_darker(o->labelcolor()));o->valuefontsize(24);
      int RealPlace=5; int DecPlace=0; o->valueplaces(RealPlace,DecPlace);
    } // Fl_Gauge* mg1rpm_G
    { Fl_Gauge* o = mg2rpm_G = new Fl_Gauge(690, 498, 110, 37, "MG2 RPM");
      mg2rpm_G->box(FL_ROUNDED_BOX);
      mg2rpm_G->color((Fl_Color)34);
      mg2rpm_G->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      mg2rpm_G->labeltype(FL_NORMAL_LABEL);
      mg2rpm_G->labelfont(1);
      mg2rpm_G->labelsize(12);
      mg2rpm_G->labelcolor((Fl_Color)126);
      mg2rpm_G->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
      mg2rpm_G->when(FL_WHEN_RELEASE);
      o->greenzonemode(FL_GAUGE_GZ_OFF);
      o->redlinemode(FL_GAUGE_RL_OFF);
      o->framecolor(fl_darker(o->labelcolor()));o->valuefontsize(24);
      int RealPlace=5; int DecPlace=0; o->valueplaces(RealPlace,DecPlace);
    } // Fl_Gauge* mg2rpm_G
    { Fl_Output* o = clock_G = new Fl_Output(695, 180, 200, 35);
      clock_G->color((Fl_Color)FL_GRAY0);
      clock_G->labelcolor((Fl_Color)25);
      clock_G->textfont(1);
      clock_G->textsize(16);
      clock_G->textcolor((Fl_Color)149);
      clock_G->align(FL_ALIGN_CENTER);
      char str[20];
      getdatetimeclockstr(str);
      o->value(str);
    } // Fl_Output* clock_G
    { Fl_Gauge* o = psd_G = new Fl_Gauge(695, 314, 200, 147, "PSD");
      psd_G->box(FL_ROUNDED_BOX);
      psd_G->color((Fl_Color)34);
      psd_G->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      psd_G->labeltype(FL_NORMAL_LABEL);
      psd_G->labelfont(1);
      psd_G->labelsize(18);
      psd_G->labelcolor((Fl_Color)195);
      psd_G->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
      psd_G->when(FL_WHEN_RELEASE);
      o->min(-6500);o->max(6500);o->type(FL_GAUGE_PSD);o->v2mode(FL_GAUGE_V2_ON);
      o->valuefontsize(14);o->framecolor(fl_darker(o->labelcolor()));o->pointercolorall(o->framecolor());
      int rp=5,dp=0; o->valueplaces(rp,dp);
      o->textcolor(fl_lighter(o->labelcolor()));o->textcolor0(o->textcolor());o->redlinestart(2000);o->greenzoneend(1800);o->greenzonestart(900);
    } // Fl_Gauge* psd_G
    { go_button = new Fl_Button(800, 481, 93, 94, "Go");
      go_button->type(1);
      go_button->box(FL_ROUND_UP_BOX);
      go_button->down_box(FL_ROUND_UP_BOX);
      go_button->color((Fl_Color)61);
      go_button->selection_color((Fl_Color)73);
      go_button->labelfont(1);
      go_button->labelsize(24);
      go_button->labelcolor((Fl_Color)51);
      go_button->callback((Fl_Callback*)go_button_CB, (void*)("Gauges"));
    } // Fl_Button* go_button
    { Fl_Gauge* o = mpg_G = new Fl_Gauge(683, 70, 112, 56, "MPG");
      mpg_G->box(FL_ROUNDED_BOX);
      mpg_G->color((Fl_Color)34);
      mpg_G->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      mpg_G->labeltype(FL_NORMAL_LABEL);
      mpg_G->labelfont(1);
      mpg_G->labelsize(12);
      mpg_G->labelcolor((Fl_Color)175);
      mpg_G->align(FL_ALIGN_BOTTOM|FL_ALIGN_INSIDE);
      mpg_G->when(FL_WHEN_RELEASE);
      o->greenzonemode(FL_GAUGE_GZ_OFF);o->valuefontsize(24);
      o->redlinemode(FL_GAUGE_RL_OFF);
      o->framecolor(fl_darker(o->labelcolor()));
      int RealPlace=4; int DecPlace=1;o->valueplaces(RealPlace,DecPlace);o->fontface(o->labelfont());
    } // Fl_Gauge* mpg_G
    { Fl_Gauge* o = dtcdist_G = new Fl_Gauge(515, 531, 158, 44, "DTC dist");
      dtcdist_G->box(FL_ROUNDED_BOX);
      dtcdist_G->color((Fl_Color)34);
      dtcdist_G->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      dtcdist_G->labeltype(FL_NORMAL_LABEL);
      dtcdist_G->labelfont(1);
      dtcdist_G->labelsize(10);
      dtcdist_G->labelcolor((Fl_Color)199);
      dtcdist_G->align(FL_ALIGN_BOTTOM_RIGHT|FL_ALIGN_INSIDE);
      dtcdist_G->when(FL_WHEN_RELEASE);
      o->greenzonemode(FL_GAUGE_GZ_OFF);o->valuefontsize(18);
      o->redlinemode(FL_GAUGE_RL_OFF);
      o->framecolor(fl_darker(o->labelcolor()));
      int RealPlace=4; int DecPlace=1;o->valueplaces(RealPlace,DecPlace);
    } // Fl_Gauge* dtcdist_G
    { wT2_G = new Fl_Gauge(0, 211, 210, 52, "wT2(F)");
      wT2_G->box(FL_ROUNDED_BOX);
      wT2_G->color((Fl_Color)34);
      wT2_G->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      wT2_G->labeltype(FL_NORMAL_LABEL);
      wT2_G->labelfont(1);
      wT2_G->labelsize(14);
      wT2_G->labelcolor((Fl_Color)250);
      wT2_G->align(FL_ALIGN_BOTTOM_LEFT|FL_ALIGN_INSIDE);
      wT2_G->when(FL_WHEN_RELEASE);
    } // Fl_Gauge* wT2_G
    { Fl_Gauge* o = odo_G = new Fl_Gauge(695, 267, 200, 48, "ODO");
      odo_G->box(FL_ROUNDED_BOX);
      odo_G->color((Fl_Color)34);
      odo_G->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      odo_G->labeltype(FL_NORMAL_LABEL);
      odo_G->labelfont(1);
      odo_G->labelsize(10);
      odo_G->labelcolor((Fl_Color)199);
      odo_G->align(FL_ALIGN_BOTTOM_RIGHT|FL_ALIGN_INSIDE);
      odo_G->when(FL_WHEN_RELEASE);
      o->greenzonemode(FL_GAUGE_GZ_OFF);o->valuefontsize(28);
      o->redlinemode(FL_GAUGE_RL_OFF);
      o->framecolor(fl_darker(o->labelcolor()));
      int RealPlace=4; int DecPlace=2;o->valueplaces(RealPlace,DecPlace);
    } // Fl_Gauge* odo_G
    { Fl_Gauge* o = timeDelta_G = new Fl_Gauge(345, 486, 218, 44, "time delta (s)");
      timeDelta_G->box(FL_ROUNDED_BOX);
      timeDelta_G->color((Fl_Color)34);
      timeDelta_G->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      timeDelta_G->labeltype(FL_NORMAL_LABEL);
      timeDelta_G->labelfont(1);
      timeDelta_G->labelsize(10);
      timeDelta_G->labelcolor((Fl_Color)199);
      timeDelta_G->align(FL_ALIGN_BOTTOM_RIGHT|FL_ALIGN_INSIDE);
      timeDelta_G->when(FL_WHEN_RELEASE);
      o->type(FL_GAUGE_SQUARE_CLOCK);o->greenzonemode(FL_GAUGE_GZ_OFF);o->valuefontsize(28);
      o->redlinemode(FL_GAUGE_RL_OFF);
      o->framecolor(fl_darker(o->labelcolor()));
      int RealPlace=6; int DecPlace=1;o->valueplaces(RealPlace,DecPlace);
    } // Fl_Gauge* timeDelta_G
    { Fl_Gauge* o = mpgmean_G = new Fl_Gauge(682, 0, 125, 70, "avg MPG");
      mpgmean_G->box(FL_ROUNDED_BOX);
      mpgmean_G->color((Fl_Color)34);
      mpgmean_G->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      mpgmean_G->labeltype(FL_NORMAL_LABEL);
      mpgmean_G->labelfont(1);
      mpgmean_G->labelsize(12);
      mpgmean_G->labelcolor((Fl_Color)175);
      mpgmean_G->align(FL_ALIGN_BOTTOM|FL_ALIGN_INSIDE);
      mpgmean_G->when(FL_WHEN_RELEASE);
      o->greenzonemode(FL_GAUGE_GZ_OFF);o->valuefontsize(36);
      o->redlinemode(FL_GAUGE_RL_OFF);o->pointercolor(fl_lighter(o->labelcolor()));
      o->framecolor(fl_darker(o->labelcolor()));
      int RealPlace=4; int DecPlace=1;o->valueplaces(RealPlace,DecPlace);o->fontface(o->labelfont());
    } // Fl_Gauge* mpgmean_G
    { Fl_Gauge* o = fuel_G = new Fl_Gauge(695, 215, 200, 55, "fuel(gal)");
      fuel_G->box(FL_ROUNDED_BOX);
      fuel_G->color((Fl_Color)34);
      fuel_G->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      fuel_G->labeltype(FL_NORMAL_LABEL);
      fuel_G->labelfont(1);
      fuel_G->labelsize(10);
      fuel_G->labelcolor((Fl_Color)190);
      fuel_G->align(FL_ALIGN_BOTTOM_LEFT|FL_ALIGN_INSIDE);
      fuel_G->when(FL_WHEN_RELEASE);
      o->type(FL_GAUGE_LINEAR);o->max(11);o->min(0);o->step(1);o->stepdiv(0.5);o->valuefontsize(24);
      o->redlinemode(FL_GAUGE_RL_OFF);o->greenzonestart(0);o->greenzoneend(2.7);
      o->framecolor(fl_darker(o->labelcolor()));o->dialcolorG(FL_RED);o->textcolorG(FL_YELLOW);o->pointercolor(fl_darker(o->labelcolor()));
      int RealPlace=3; int DecPlace=1;o->valueplaces(RealPlace,DecPlace);o->pointercolor0(fl_darker(o->labelcolor()));
    } // Fl_Gauge* fuel_G
    { Fl_Gauge* o = load_G = new Fl_Gauge(536, 397, 160, 45, "LOAD(%)");
      load_G->box(FL_ROUNDED_BOX);
      load_G->color((Fl_Color)34);
      load_G->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      load_G->labeltype(FL_NORMAL_LABEL);
      load_G->labelfont(1);
      load_G->labelsize(10);
      load_G->labelcolor((Fl_Color)173);
      load_G->align(FL_ALIGN_BOTTOM_LEFT|FL_ALIGN_INSIDE);
      load_G->when(FL_WHEN_RELEASE);
      o->type(FL_GAUGE_LINEAR);o->valuefontsize(28);o->min(75);o->max(90);o->step(5);o->stepdiv(1);
      o->redlinemode(FL_GAUGE_RL_OFF);o->pointercolor(fl_darker(o->labelcolor()));o->pointercolor0(fl_darker(o->labelcolor()));
      o->framecolor(fl_darker(o->labelcolor()));o->greenzonestart(80);o->greenzoneend(99.99);
      int RealPlace=4; int DecPlace=1;o->valueplaces(RealPlace,DecPlace);o->valuedisplaydelta(0.2);
    } // Fl_Gauge* load_G
    { Fl_Gauge* o = acc_G = new Fl_Gauge(340, 322, 110, 110, "acc");
      acc_G->box(FL_ROUNDED_BOX);
      acc_G->color((Fl_Color)34);
      acc_G->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      acc_G->labeltype(FL_NORMAL_LABEL);
      acc_G->labelfont(0);
      acc_G->labelsize(12);
      acc_G->labelcolor((Fl_Color)133);
      acc_G->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
      acc_G->when(FL_WHEN_RELEASE);
      o->type(FL_GAUGE_XY);o->min(-50);o->max(50);o->step(20);o->stepdiv(10);
      int RealPlace=2; int DecPlace=0;o->valueplaces(RealPlace,DecPlace);
      o->valuedisplaydelta(3);
    } // Fl_Gauge* acc_G
    { Fl_Gauge* o = aLR_G = new Fl_Gauge(340, 432, 79, 41, "aLR");
      aLR_G->box(FL_ROUNDED_BOX);
      aLR_G->color((Fl_Color)34);
      aLR_G->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      aLR_G->labeltype(FL_NORMAL_LABEL);
      aLR_G->labelfont(0);
      aLR_G->labelsize(12);
      aLR_G->labelcolor((Fl_Color)93);
      aLR_G->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
      aLR_G->when(FL_WHEN_RELEASE);
      o->greenzonemode(FL_GAUGE_GZ_OFF);
      o->redlinemode(FL_GAUGE_RL_OFF);
      o->framecolor(fl_darker(o->labelcolor()));
      int RealPlace=2; int DecPlace=0; o->valueplaces(RealPlace,DecPlace);o->valuedisplaydelta(3);
    } // Fl_Gauge* aLR_G
    { Fl_Output* o = shift_G = new Fl_Output(485, 365, 30, 30);
      shift_G->color((Fl_Color)FL_FOREGROUND_COLOR);
      shift_G->labelcolor((Fl_Color)25);
      shift_G->textfont(1);
      shift_G->textsize(32);
      shift_G->textcolor((Fl_Color)149);
      shift_G->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      o->value("?");
    } // Fl_Output* shift_G
    { Fl_Output* o = light_G = new Fl_Output(480, 335, 30, 30);
      light_G->box(FL_ROUND_DOWN_BOX);
      light_G->color((Fl_Color)FL_FOREGROUND_COLOR);
      light_G->labelcolor((Fl_Color)25);
      light_G->textfont(1);
      light_G->textsize(32);
      light_G->textcolor((Fl_Color)85);
      light_G->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      o->value("?");
    } // Fl_Output* light_G
    { Fl_Output* o = door_G = new Fl_Output(485, 300, 30, 30);
      door_G->color((Fl_Color)FL_FOREGROUND_COLOR);
      door_G->labelcolor((Fl_Color)25);
      door_G->textfont(1);
      door_G->textsize(32);
      door_G->textcolor((Fl_Color)121);
      door_G->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      o->value("?");
    } // Fl_Output* door_G
    { Fl_Gauge* o = trip_G = new Fl_Gauge(682, 126, 130, 53, "Trip");
      trip_G->box(FL_ROUNDED_BOX);
      trip_G->color((Fl_Color)34);
      trip_G->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      trip_G->labeltype(FL_NORMAL_LABEL);
      trip_G->labelfont(2);
      trip_G->labelsize(10);
      trip_G->labelcolor((Fl_Color)247);
      trip_G->align(FL_ALIGN_BOTTOM_RIGHT|FL_ALIGN_INSIDE);
      trip_G->when(FL_WHEN_RELEASE);
      o->greenzonemode(FL_GAUGE_GZ_OFF);o->valuefontsize(36);
      o->redlinemode(FL_GAUGE_RL_OFF);o->pointercolor(fl_lighter(o->labelcolor()));
      o->framecolor(fl_darker(o->labelcolor()));
      int RealPlace=4; int DecPlace=2;o->valueplaces(RealPlace,DecPlace);o->fontface(o->labelfont());
    } // Fl_Gauge* trip_G
    { Fl_Gauge* o = kW_G = new Fl_Gauge(520, 299, 160, 50, "kW");
      kW_G->box(FL_ROUNDED_BOX);
      kW_G->color((Fl_Color)34);
      kW_G->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      kW_G->labeltype(FL_NORMAL_LABEL);
      kW_G->labelfont(1);
      kW_G->labelsize(10);
      kW_G->labelcolor((Fl_Color)173);
      kW_G->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
      kW_G->when(FL_WHEN_RELEASE);
      o->type(FL_GAUGE_LINEAR);o->valuefontsize(36);o->min(-5);o->max(20);o->step(5);o->stepdiv(1);
      o->redlinemode(FL_GAUGE_RL_OFF);o->pointercolor(fl_darker(o->labelcolor()));o->pointercolor0(fl_darker(o->labelcolor()));
      o->framecolor(fl_darker(o->labelcolor()));o->greenzonestart(14);o->greenzoneend(19.9);o->pointercolorG(FL_GREEN);
      int RealPlace=4; int DecPlace=1;o->valueplaces(RealPlace,DecPlace);o->valuedisplaydelta(0.2);
    } // Fl_Gauge* kW_G
    { Fl_Gauge* o = eff_G = new Fl_Gauge(520, 206, 160, 50, "eff(%)");
      eff_G->box(FL_ROUNDED_BOX);
      eff_G->color((Fl_Color)34);
      eff_G->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      eff_G->labeltype(FL_NORMAL_LABEL);
      eff_G->labelfont(1);
      eff_G->labelsize(10);
      eff_G->labelcolor((Fl_Color)173);
      eff_G->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
      eff_G->when(FL_WHEN_RELEASE);
      o->type(FL_GAUGE_LINEAR);o->valuefontsize(36);o->min(25);o->max(35);o->step(5);o->stepdiv(1);
      o->redlinemode(FL_GAUGE_RL_OFF);o->pointercolor(fl_darker(o->labelcolor()));o->pointercolor0(fl_darker(o->labelcolor()));
      o->framecolor(fl_darker(o->labelcolor()));o->greenzonestart(30.7);o->greenzoneend(34.9);o->pointercolorG(FL_GREEN);
      int RealPlace=4; int DecPlace=1;o->valueplaces(RealPlace,DecPlace);o->valuedisplaydelta(0.2);
    } // Fl_Gauge* eff_G
    { Fl_Gauge* o = eff2_G = new Fl_Gauge(530, 255, 160, 45, "eff2(%)");
      eff2_G->box(FL_ROUNDED_BOX);
      eff2_G->color((Fl_Color)34);
      eff2_G->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      eff2_G->labeltype(FL_NORMAL_LABEL);
      eff2_G->labelfont(1);
      eff2_G->labelsize(10);
      eff2_G->labelcolor((Fl_Color)173);
      eff2_G->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
      eff2_G->when(FL_WHEN_RELEASE);
      o->type(FL_GAUGE_LINEAR);o->valuefontsize(28);o->min(25);o->max(45);o->step(5);o->stepdiv(1);
      o->redlinemode(FL_GAUGE_RL_OFF);o->pointercolor(fl_darker(o->labelcolor()));o->pointercolor0(fl_darker(o->labelcolor()));
      o->framecolor(fl_darker(o->labelcolor()));o->greenzonestart(35);o->greenzoneend(44.9);
      int RealPlace=4; int DecPlace=1;o->valueplaces(RealPlace,DecPlace);o->valuedisplaydelta(0.2);
    } // Fl_Gauge* eff2_G
    { Fl_Gauge* o = kW2_G = new Fl_Gauge(530, 348, 160, 50, "kW2");
      kW2_G->box(FL_ROUNDED_BOX);
      kW2_G->color((Fl_Color)34);
      kW2_G->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      kW2_G->labeltype(FL_NORMAL_LABEL);
      kW2_G->labelfont(1);
      kW2_G->labelsize(10);
      kW2_G->labelcolor((Fl_Color)173);
      kW2_G->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
      kW2_G->when(FL_WHEN_RELEASE);
      o->type(FL_GAUGE_SQRT);o->valuefontsize(28);o->min(-20);o->max(20);o->step(5);o->stepdiv(1);
      o->pointercolor(fl_darker(o->labelcolor()));o->pointercolor0(fl_darker(o->labelcolor()));o->pointercolorR(FL_YELLOW);o->pointercolorG(FL_CYAN);
      o->framecolor(fl_darker(o->labelcolor()));o->greenzonestart(-20);o->greenzoneend(-1);o->redlinestart(15);
      int RealPlace=4; int DecPlace=1;o->valueplaces(RealPlace,DecPlace);o->valuedisplaydelta(0.2);
    } // Fl_Gauge* kW2_G
    { Fl_Gauge* o = gal_G = new Fl_Gauge(415, 529, 97, 46, "gal");
      gal_G->box(FL_ROUNDED_BOX);
      gal_G->color((Fl_Color)34);
      gal_G->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      gal_G->labeltype(FL_NORMAL_LABEL);
      gal_G->labelfont(1);
      gal_G->labelsize(12);
      gal_G->labelcolor((Fl_Color)175);
      gal_G->align(FL_ALIGN_BOTTOM|FL_ALIGN_INSIDE);
      gal_G->when(FL_WHEN_RELEASE);
      o->greenzonemode(FL_GAUGE_GZ_OFF);o->valuefontsize(24);
      o->redlinemode(FL_GAUGE_RL_OFF);
      o->framecolor(fl_darker(o->labelcolor()));
      int RealPlace=5; int DecPlace=3;o->valueplaces(RealPlace,DecPlace);o->fontface(o->labelfont());
    } // Fl_Gauge* gal_G
    { Fl_Gauge* o = dhvBV_G = new Fl_Gauge(360, 232, 85, 51, "dhvBV(%)");
      dhvBV_G->box(FL_ROUNDED_BOX);
      dhvBV_G->color((Fl_Color)34);
      dhvBV_G->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      dhvBV_G->labeltype(FL_NORMAL_LABEL);
      dhvBV_G->labelfont(1);
      dhvBV_G->labelsize(12);
      dhvBV_G->labelcolor((Fl_Color)218);
      dhvBV_G->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
      dhvBV_G->when(FL_WHEN_RELEASE);
      o->greenzonemode(FL_GAUGE_GZ_OFF);
      o->redlinemode(FL_GAUGE_RL_OFF);
      o->framecolor(fl_darker(o->labelcolor()));
      int RealPlace=3; int DecPlace=1;o->valueplaces(RealPlace,DecPlace);
    } // Fl_Gauge* dhvBV_G
    { Fl_Gauge* o = hvFanV_G = new Fl_Gauge(425, 440, 90, 45, "hvFanV");
      hvFanV_G->box(FL_ROUNDED_BOX);
      hvFanV_G->color((Fl_Color)34);
      hvFanV_G->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      hvFanV_G->labeltype(FL_NORMAL_LABEL);
      hvFanV_G->labelfont(1);
      hvFanV_G->labelsize(12);
      hvFanV_G->labelcolor((Fl_Color)61);
      hvFanV_G->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
      hvFanV_G->when(FL_WHEN_RELEASE);
      o->greenzonemode(FL_GAUGE_GZ_OFF);o->valuefontsize(24);
      o->redlinemode(FL_GAUGE_RL_OFF);o->pointercolor(fl_lighter(o->labelcolor()));
      o->framecolor(fl_darker(o->labelcolor()));
      int RealPlace=5; int DecPlace=2; o->valueplaces(RealPlace,DecPlace);
    } // Fl_Gauge* hvFanV_G
    o->cursor(FL_CURSOR_DEFAULT,FL_YELLOW,FL_RED);
    Fl::flush();
    gauges_window->end();
  } // Fl_Double_Window* gauges_window
  int RealPlace=5;int DecPlace=1;iceT_G->valueplaces(RealPlace,DecPlace); iceT_G->v2mode(FL_GAUGE_V2_ON);
iceT_G->framecolor(fl_darker(iceT_G->labelcolor()));
iceT_G->v2color(wT_G->labelcolor()); // since we draw wT here as value 2
iceT_G->valuefontsize(48);

wT_G->max(205);wT_G->min(110);//wT_G->step(10);wT_G->stepdiv(5);
wT_G->type(FL_GAUGE_SQUARE);//_DIGITAL);
wT_G->redlinestart(190);wT_G->greenzoneend(157);wT_G->greenzonestart(30);
RealPlace=5; DecPlace=1;wT_G->valueplaces(RealPlace,DecPlace); 
wT_G->pointercolor(wT_G->labelcolor());wT_G->pointercolor0(wT_G->labelcolor());
wT_G->pointercolorG(FL_GREEN);wT_G->pointercolorR(FL_RED);
wT_G->valuefontsize(42);
wT_G->framecolor(fl_darker(wT_G->labelcolor()));

wT2_G->max(205);wT2_G->min(110);//wT2_G->step(10);wT2_G->stepdiv(5);
wT2_G->type(FL_GAUGE_SQUARE);//_DIGITAL);
wT2_G->redlinestart(190);wT2_G->greenzoneend(157);wT2_G->greenzonestart(30);
RealPlace=5; DecPlace=1;wT2_G->valueplaces(RealPlace,DecPlace); 
wT2_G->pointercolor(wT2_G->labelcolor());wT2_G->pointercolor0(wT2_G->labelcolor());
wT2_G->pointercolorG(FL_GREEN);wT2_G->pointercolorR(FL_RED);
wT2_G->valuefontsize(42);
wT2_G->framecolor(fl_darker(wT2_G->labelcolor()));
  speed_G->max(200);speed_G->min(0);//speed_G->step(200);speed_G->stepdiv(100);

RealPlace=2; DecPlace=0;speed_G->valueplaces(RealPlace,DecPlace); 
speed_G->pointercolor(speed_G->labelcolor());speed_G->pointercolor0(speed_G->labelcolor());
speed_G->pointercolorG(FL_GREEN);speed_G->pointercolorR(FL_YELLOW);
speed_G->fontface(speed_G->labelfont());
speed_G->framecolor(fl_darker(speed_G->labelcolor()));

amp_G->max(100);amp_G->min(-100);amp_G->step(20);amp_G->stepdiv(5);
amp_G->type(FL_GAUGE_SQRT);//_LINEAR);//_DIGITAL);
amp_G->greenzonestart(-100);amp_G->greenzoneend(-8);amp_G->redlinestart(8);
RealPlace=5; DecPlace=1;amp_G->valueplaces(RealPlace,DecPlace); 
amp_G->greenzonecolorG(my_fl_dark_blue);amp_G->redlinecolorR(FL_DARK_RED);
amp_G->pointercolor(FL_WHITE);amp_G->pointercolor0(FL_WHITE);
amp_G->pointercolorR(FL_YELLOW);amp_G->pointercolorG(FL_CYAN);
amp_G->textcolor(my_fl_dark_gray);amp_G->textcolor0(my_fl_dark_gray);
amp_G->textcolorG(my_fl_dark_gray);amp_G->textcolorR(my_fl_dark_gray);
amp_G->valuefontsize(42);


soc_G->max(100);soc_G->min(0);//soc_G->step(10);soc_G->stepdiv(5);
soc_G->type(FL_GAUGE_SQUARE);//_DIGITAL);
soc_G->redlinestart(65);soc_G->greenzoneend(50);soc_G->greenzonestart(0);
RealPlace=4; DecPlace=1;soc_G->valueplaces(RealPlace,DecPlace); 
//soc_G->greenzonecolor(FL_BLUE);soc_G->greenzonecolor0(FL_BLUE);
soc_G->pointercolorG(FL_MAGENTA);soc_G->pointercolorR(FL_GREEN);
soc_G->pointercolor(/*FL_BLUE*/my_fl_light_gray);soc_G->pointercolor0(/*FL_BLUE*/my_fl_light_gray);
soc_G->valuefontsize(42);
soc_G->framecolor(fl_darker(soc_G->labelcolor()));
  rpm_G->max(2200);rpm_G->min(800);rpm_G->step(200);rpm_G->stepdiv(100);

rpm_G->redlinestart(2050);rpm_G->greenzoneend(2000);rpm_G->greenzonestart(900);
RealPlace=4; DecPlace=0;rpm_G->valueplaces(RealPlace,DecPlace); rpm_G->v2mode(FL_GAUGE_V2_ON);
rpm_G->scaleplaces(RealPlace,DecPlace);
rpm_G->framecolor(fl_darker(rpm_G->labelcolor())); 
rpm_G->v2color(rpm2_G->labelcolor()); // since we draw rpm2 here as value 2
rpm_G->valuefontsize(48);

ign_G->max(19);ign_G->min(9);//ign_G->step(10);ign_G->stepdiv(5);
ign_G->type(FL_GAUGE_DIGITAL);//_DIGITAL);
ign_G->redlinestart(18);ign_G->greenzoneend(15);ign_G->greenzonestart(13);
RealPlace=4; DecPlace=1;ign_G->valueplaces(RealPlace,DecPlace); 
ign_G->greenzonecolor(FL_BLUE);ign_G->greenzonecolor0(FL_BLUE);
ign_G->textcolorG(FL_GREEN);
}

void Gauges::show() {
  gauges_window->show();
}

Fl_Double_Window *about_window=(Fl_Double_Window *)0;

Fl_Text_Display *about_textdisplay=(Fl_Text_Display *)0;

Fl_Button *accept_button=(Fl_Button *)0;

static void cb_accept_button(Fl_Button* o, void*) {
  QuitShowLic=true;
FILE *fp;
fp = fopen("LicRead.txt","w"); //
if (fp==NULL){printf("!!! Error creating \"LicRead.txt\"!!!");}
	
((Fl_Window*)((o->parent())->parent()))->hide();
}

Fl_Output *homepage_txt=(Fl_Output *)0;

Fl_Double_Window* make_about_window() {
  Fl_Text_Buffer *buff = new Fl_Text_Buffer(); 
buff->text(LicText);
  { about_window = new Fl_Double_Window(785, 508, "About - PriiDash(TM)");
    { Fl_Scroll* o = new Fl_Scroll(5, 0, 777, 450);
      o->box(FL_FLAT_BOX);
      o->color((Fl_Color)FL_LIGHT1);
      { Fl_Text_Display* o = about_textdisplay = new Fl_Text_Display(7, 31, 773, 342, "License Agreement");
        about_textdisplay->box(FL_BORDER_FRAME);
        about_textdisplay->color((Fl_Color)FL_LIGHT3);
        about_textdisplay->labelfont(9);
        about_textdisplay->labelsize(18);
        about_textdisplay->labelcolor((Fl_Color)59);
        o->buffer(buff);
      } // Fl_Text_Display* about_textdisplay
      { accept_button = new Fl_Button(305, 379, 195, 66, "Accept License");
        accept_button->color((Fl_Color)FL_GREEN);
        accept_button->labelfont(9);
        accept_button->labelsize(20);
        accept_button->callback((Fl_Callback*)cb_accept_button);
      } // Fl_Button* accept_button
      o->end();
    } // Fl_Scroll* o
    { Fl_Output* o = homepage_txt = new Fl_Output(335, 477, 305, 26, "PriiDash(TM) Home Page:");
      homepage_txt->box(FL_FLAT_BOX);
      homepage_txt->color((Fl_Color)23);
      homepage_txt->labelfont(1);
      homepage_txt->textfont(1);
      o->value("http://priidash.sourceforge.net/");
    } // Fl_Output* homepage_txt
    about_window->end();
  } // Fl_Double_Window* about_window
  return about_window;
}
